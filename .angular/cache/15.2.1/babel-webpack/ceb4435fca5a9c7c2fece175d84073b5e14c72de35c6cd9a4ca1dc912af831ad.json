{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { environment } from \"../environments/environment\";\nimport * as i0 from \"@angular/core\";\nexport let HttpService = /*#__PURE__*/(() => {\n  class HttpService {\n    constructor() {\n      this.rutaServidor = environment.baseUrl;\n    }\n    post(ruta, payload) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const respuestaRaw = yield fetch(this.rutaServidor + ruta, {\n          body: JSON.stringify(payload),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          method: \"POST\",\n          credentials: \"include\"\n        });\n        return yield respuestaRaw.json();\n      });\n    }\n    formdata(ruta, payload) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const respuestaRaw = yield fetch(this.rutaServidor + ruta, {\n          body: payload,\n          method: \"POST\"\n        });\n        return yield respuestaRaw.json();\n      });\n    }\n    get(ruta) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Por defecto se hace una petición GET\n        const respuestaRaw = yield fetch(this.rutaServidor + ruta, {\n          credentials: \"include\"\n        });\n        return yield respuestaRaw.json();\n      });\n    }\n    delete(ruta) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const respuestaRaw = yield fetch(this.rutaServidor + ruta, {\n          credentials: \"include\",\n          method: \"DELETE\"\n        });\n        return yield respuestaRaw.json();\n      });\n    }\n  }\n  HttpService.ɵfac = function HttpService_Factory(t) {\n    return new (t || HttpService)();\n  };\n  HttpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpService,\n    factory: HttpService.ɵfac,\n    providedIn: 'root'\n  });\n  return HttpService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}